package cherry.foundation.db.gen.mapper;

import cherry.foundation.db.gen.dto.VerifyConstraints;
import cherry.foundation.db.gen.dto.VerifyConstraintsCriteria;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.JdbcType;

public interface VerifyConstraintsMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VERIFY_CONSTRAINTS
     *
     * @mbggenerated
     */
    @SelectProvider(type=VerifyConstraintsSqlProvider.class, method="countByExample")
    int countByExample(VerifyConstraintsCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VERIFY_CONSTRAINTS
     *
     * @mbggenerated
     */
    @DeleteProvider(type=VerifyConstraintsSqlProvider.class, method="deleteByExample")
    int deleteByExample(VerifyConstraintsCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VERIFY_CONSTRAINTS
     *
     * @mbggenerated
     */
    @Delete({
        "delete from VERIFY_CONSTRAINTS",
        "where ID = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VERIFY_CONSTRAINTS
     *
     * @mbggenerated
     */
    @Insert({
        "insert into VERIFY_CONSTRAINTS (PARENT_ID, NAME)",
        "values (#{parentId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR})"
    })
    @Options(useGeneratedKeys=true,keyProperty="id")
    int insert(VerifyConstraints record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VERIFY_CONSTRAINTS
     *
     * @mbggenerated
     */
    @InsertProvider(type=VerifyConstraintsSqlProvider.class, method="insertSelective")
    @Options(useGeneratedKeys=true,keyProperty="id")
    int insertSelective(VerifyConstraints record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VERIFY_CONSTRAINTS
     *
     * @mbggenerated
     */
    @SelectProvider(type=VerifyConstraintsSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="PARENT_ID", property="parentId", jdbcType=JdbcType.BIGINT),
        @Result(column="NAME", property="name", jdbcType=JdbcType.VARCHAR)
    })
    List<VerifyConstraints> selectByExampleWithRowbounds(VerifyConstraintsCriteria example, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VERIFY_CONSTRAINTS
     *
     * @mbggenerated
     */
    @SelectProvider(type=VerifyConstraintsSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="PARENT_ID", property="parentId", jdbcType=JdbcType.BIGINT),
        @Result(column="NAME", property="name", jdbcType=JdbcType.VARCHAR)
    })
    List<VerifyConstraints> selectByExample(VerifyConstraintsCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VERIFY_CONSTRAINTS
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "ID, PARENT_ID, NAME",
        "from VERIFY_CONSTRAINTS",
        "where ID = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="PARENT_ID", property="parentId", jdbcType=JdbcType.BIGINT),
        @Result(column="NAME", property="name", jdbcType=JdbcType.VARCHAR)
    })
    VerifyConstraints selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VERIFY_CONSTRAINTS
     *
     * @mbggenerated
     */
    @UpdateProvider(type=VerifyConstraintsSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") VerifyConstraints record, @Param("example") VerifyConstraintsCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VERIFY_CONSTRAINTS
     *
     * @mbggenerated
     */
    @UpdateProvider(type=VerifyConstraintsSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") VerifyConstraints record, @Param("example") VerifyConstraintsCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VERIFY_CONSTRAINTS
     *
     * @mbggenerated
     */
    @UpdateProvider(type=VerifyConstraintsSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(VerifyConstraints record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table VERIFY_CONSTRAINTS
     *
     * @mbggenerated
     */
    @Update({
        "update VERIFY_CONSTRAINTS",
        "set PARENT_ID = #{parentId,jdbcType=BIGINT},",
          "NAME = #{name,jdbcType=VARCHAR}",
        "where ID = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(VerifyConstraints record);
}