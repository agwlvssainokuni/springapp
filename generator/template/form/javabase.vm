/*
 * Copyright 2014 agwlvssainokuni
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ${typeDef.packageName};

import java.io.Serializable;

import javax.validation.groups.Default;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@Getter
@Setter
@EqualsAndHashCode
@ToString
public abstract class ${typeDef.className}Base implements Serializable {

	private static final long serialVersionUID = 1L;

#foreach ($prop in $typeDef.itemDef)
########################################################################
#if ($prop.type == "数値")
#if ($prop.required == "○")
	@javax.validation.constraints.NotNull(groups = { Default.class })
#end
#if ($prop.min)
	@javax.validation.constraints.Min(value = $prop.min, groups = { Default.class })
#end
#if ($prop.max)
	@javax.validation.constraints.Max(value = $prop.max, groups = { Default.class })
#end
################ サブ型
#if ($prop.subtype == "整数")
	private Integer ${prop.name};
#elseif ($prop.subtype == "整数(Long)")
	private Long ${prop.name};
#else
	private java.math.BigDecimal ${prop.name};
#end

########################################################################
#elseif ($prop.type == "日付" || $prop.type == "時刻" || $prop.type == "日時")
#if ($prop.required == "○")
	@javax.validation.constraints.NotNull(groups = { Default.class })
#end
################ サブ型
#if ($prop.subtype == "範囲下限")
	@cherry.foundation.type.format.CustomDateTimeFormat(cherry.foundation.type.format.CustomDateTimeFormat.Range.FROM)
#elseif ($prop.subtype == "範囲上限")
	@cherry.foundation.type.format.CustomDateTimeFormat(cherry.foundation.type.format.CustomDateTimeFormat.Range.TO)
#else
	@cherry.foundation.type.format.CustomDateTimeFormat()
#end
################ 変数宣言
#if ($prop.type == "日付")
	private org.joda.time.LocalDate ${prop.name};
#elseif ($prop.type == "時刻")
	private org.joda.time.LocalTime ${prop.name};
#else
	private org.joda.time.LocalDateTime ${prop.name};
#end

########################################################################
#elseif ($prop.type == "ファイル")
#if ($prop.required == "○")
	@javax.validation.constraints.NotNull(groups = { Default.class })
#end
################ 変数宣言
	private org.springframework.web.multipart.MultipartFile ${prop.name};

########################################################################
#elseif ($prop.type == "フラグ")
################ 変数宣言
	private boolean ${prop.name};

########################################################################
#elseif ($prop.type == "リスト")
################ 変数宣言
	private java.util.List<${prop.subtype}> ${prop.name};

########################################################################
#elseif ($prop.type == "ロックバージョン")
################ 変数宣言
	private Integer ${prop.name};

########################################################################
#elseif ($prop.type == "ページネーション")
################ 変数宣言
	private long ${prop.name} = 0L;

########################################################################
#elseif ($prop.type == "文字列")
#if ($prop.required == "○")
#if ($prop.minlen)
	@javax.validation.constraints.NotNull(groups = { Default.class })
#else
	@org.hibernate.validator.constraints.NotEmpty(groups = { Default.class })
#end
#end
#if ($prop.minlen)
	@cherry.foundation.validator.MinLength(value = $prop.minlen, groups = { Default.class })
#end
#if ($prop.maxlen)
	@cherry.foundation.validator.MaxLength(value = $prop.maxlen, groups = { Default.class })
#end
################ サブ型
#if ($prop.subtype == "メール")
	@org.hibernate.validator.constraints.Email(groups = { Default.class })
#elseif ($prop.subtype == "半角")
	@cherry.foundation.validator.CharTypeBasicLatin(groups = { Default.class })
#elseif ($prop.subtype == "半角(カナ含む)")
	@cherry.foundation.validator.CharTypeHalfWidth(groups = { Default.class })
#elseif ($prop.subtype == "半角数字")
	@cherry.foundation.validator.CharTypeNumeric(groups = { Default.class })
#elseif ($prop.subtype == "半角英字")
	@cherry.foundation.validator.CharTypeAlpha(groups = { Default.class })
#elseif ($prop.subtype == "半角英数字")
	@cherry.foundation.validator.CharTypeAlphaNumeric(groups = { Default.class })
#elseif ($prop.subtype == "半角カナ")
	@cherry.foundation.validator.CharTypeHalfKatakana(groups = { Default.class })
#elseif ($prop.subtype == "全角")
	@cherry.foundation.validator.CharTypeFullWidth(groups = { Default.class })
#elseif ($prop.subtype == "全角数字")
	@cherry.foundation.validator.CharTypeFullNumeric(groups = { Default.class })
#elseif ($prop.subtype == "全角英字")
	@cherry.foundation.validator.CharTypeFullAlpha(groups = { Default.class })
#elseif ($prop.subtype == "全角英数字")
	@cherry.foundation.validator.CharTypeFullAlphaNumeric(groups = { Default.class })
#elseif ($prop.subtype == "全角ひらがな")
	@cherry.foundation.validator.CharTypeFullHiragana(groups = { Default.class })
#elseif ($prop.subtype == "全角カタカナ")
	@cherry.foundation.validator.CharTypeFullKatakana(groups = { Default.class })
#else
#end
################ 変数宣言
	private String ${prop.name};

########################################################################
#else
#end
#end
	@Getter
	public enum Prop {
#foreach ($prop in $typeDef.itemDef)
		${prop.upperCamel("name")}("${prop.name}", "${typeDef.formName}.${prop.name}"), //
#end
		DUMMY("dummy", "dummy");

		private final String name;
		private final String nameWithForm;

		private Prop(String name, String nameWithForm) {
			this.name = name;
			this.nameWithForm = nameWithForm;
		}
	}

}
