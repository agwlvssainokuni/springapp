apply plugin: "war"
apply plugin: "eclipse-wtp"
apply plugin: "jettyEclipse"

configurations { container }
sourceSets.main {
	compileClasspath += [configurations.container]
	runtimeClasspath += [configurations.container]
}
sourceSets.test {
	compileClasspath += [configurations.container]
	runtimeClasspath += [configurations.container]
}
eclipse {
	classpath.plusConfigurations += [configurations.container]
}

ext {
	versionArgs4j = "2.32"
	versionJetty = "9.2.12.v20150709"
	//	versionJetty = "9.3.1.v20150714"
}

dependencies {
	compile project(":goods")
	compile project(":foundation")
	compile "org.apache.tiles:tiles-core:${versionTiles}"
	compile "org.apache.tiles:tiles-api:${versionTiles}"
	compile "org.apache.tiles:tiles-servlet:${versionTiles}"
	compile "org.apache.tiles:tiles-jsp:${versionTiles}"
	compile "org.apache.tiles:tiles-el:${versionTiles}"
	compile "org.apache.tiles:tiles-extras:${versionTiles}"
	compile "javax.servlet:jstl:${versionJstl}"
	runtime "org.flywaydb:flyway-core:${versionFlyway}"
	runtime "ch.qos.logback:logback-core:${versionLogback}"
	runtime "ch.qos.logback:logback-classic:${versionLogback}"
	providedCompile "javax.servlet:javax.servlet-api:${versionJavaServlet}"
	providedCompile "javax.servlet.jsp:javax.servlet.jsp-api:${versionJavaJsp}"
	providedCompile "javax.jms:jms-api:${versionJavaJms}"
	providedCompile "javax.transaction:transaction-api:${versionJavaTransaction}"
	compileOnly "org.projectlombok:lombok:${versionLombok}"
	container "args4j:args4j:${versionArgs4j}"
	container "org.eclipse.jetty:jetty-webapp:${versionJetty}"
	container "org.eclipse.jetty:jetty-plus:${versionJetty}"
	// container "org.eclipse.jetty:jetty-jsp:${versionJetty}"
	container "org.eclipse.jetty:apache-jsp:${versionJetty}"
	container "org.eclipse.jetty:jetty-annotations:${versionJetty}"
	container "com.h2database:h2:${versionH2db}"
	container "org.apache.commons:commons-dbcp2:${versionCommonsDbcp2}"
	testRuntime "com.h2database:h2:${versionH2db}"
	testCompile "org.springframework:spring-test:${versionSpring}"
	testCompile "junit:junit:${versionJunit}"
	testCompile "org.hamcrest:hamcrest-all:${versionHamcrest}"
	testCompile "org.mockito:mockito-all:${versionMockito}"
	testRuntime "org.glassfish:javax.el:${versionJavaEl}"
}

eclipse.wtp.facet {
	facet name: "java", version: "1.7"
	facet name: "jst.web", version: "3.0"
}

jar { exclude "Main.class" }

war {
	classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
	from("build/classes/main") { include "Main.class" }
	manifest.attributes "Main-Class": "Main"
	manifest.attributes "Class-Path": configurations.container.files.collect { "deps/" + it.name }.join(" ")
	// Jettyのライブラリを全てWARに展開する場合。
	//	from(configurations.container.collect { project.zipTree(it) }) {
	//		exclude "META-INF/LICENSE*"
	//		exclude "META-INF/NOTICE*"
	//		exclude "META-INF/eclipse.inf"
	//		exclude "OSGI-OPT/**"
	//		exclude "about.html"
	//		exclude "jetty-dir.css"
	//	}
}

task executable(type: Copy, dependsOn: war) {
	into "build/executable"
	from("build/libs") { include "*.war" }
	into("deps") { from configurations.container.files }
}
assemble.dependsOn(executable)

buildscript {
	ext { versionJetty = "9.2.12.v20150709" }
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("com.sahlbach.gradle:gradle-jetty-eclipse-plugin:1.9.+") { exclude group: "org.eclipse.jetty" }
		classpath "org.eclipse.jetty:jetty-webapp:${versionJetty}"
		classpath "org.eclipse.jetty:jetty-plus:${versionJetty}"
		// classpath "org.eclipse.jetty:jetty-jsp:${versionJetty}"
		classpath "org.eclipse.jetty:apache-jsp:${versionJetty}"
		classpath "org.eclipse.jetty:jetty-annotations:${versionJetty}"
		classpath "com.h2database:h2:${versionH2db}"
	}
}

jettyEclipse {
	jettyConfig = file("jetty-config.xml")
	additionalRuntimeJars = buildscript.configurations.classpath
}

def messageDir = "src/main/resources/message"
task mergeformmessage << {
	ant.concat(destfile: "${messageDir}/form/form.properties", encoding: "UTF-8", outputencoding: "UTF-8") {
		fileset(dir: "${messageDir}/form/") {
			include(name: "**.txt")
			exclude(name: "**.properties")
		}
	}
	ant.native2ascii(src: "${messageDir}/form/", dest: "${messageDir}/", includes: "form.properties", encoding: "UTF-8")
}
