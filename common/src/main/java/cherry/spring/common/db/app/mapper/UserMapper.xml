<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cherry.spring.common.db.app.mapper.UserMapper">
	<resultMap id="BaseResultMap" type="cherry.spring.common.db.gen.dto.Users">
		<id column="ID" jdbcType="INTEGER" property="id" />
		<result column="LOGIN_ID" jdbcType="VARCHAR" property="loginId" />
		<result column="PASSWORD" jdbcType="CHAR" property="password" />
		<result column="REGISTERED_AT" jdbcType="TIMESTAMP" property="registeredAt" />
		<result column="FIRST_NAME" jdbcType="VARCHAR" property="firstName" />
		<result column="LAST_NAME" jdbcType="VARCHAR" property="lastName" />
		<result column="UPDATED_AT" jdbcType="TIMESTAMP" property="updatedAt" />
		<result column="CREATED_AT" jdbcType="TIMESTAMP" property="createdAt" />
		<result column="DELETED_FLG" jdbcType="INTEGER" property="deletedFlg" />
	</resultMap>
	<insert id="createUser" useGeneratedKeys="true" keyColumn="id"
		keyProperty="ent.id">
		INSERT INTO users (
			login_id,
			password,
			first_name,
			last_name
		)
		VALUES (
			#{ent.loginId,jdbcType=VARCHAR},
			#{ent.password,jdbcType=VARCHAR},
			#{ent.firstName,jdbcType=VARCHAR},
			#{ent.lastName,jdbcType=VARCHAR}
		)
	</insert>
	<update id="updateUser">
		UPDATE users
		SET
			first_name = #{ent.firstName,jdbcType=VARCHAR},
			last_name = #{ent.lastName,jdbcType=VARCHAR},
			updated_at = CURRENT_TIMESTAMP
		WHERE
			id = #{id,jdbcType=INTEGER}
			AND
			deleted_flg = 0
	</update>
	<update id="updatePassword">
		UPDATE users
		SET
			password = #{password,jdbcType=VARCHAR},
			updated_at = CURRENT_TIMESTAMP
		WHERE
			id = #{id,jdbcType=INTEGER}
			AND
			deleted_flg = 0
	</update>
	<update id="changePassword">
		UPDATE users
		SET
			password = #{password,jdbcType=VARCHAR},
			updated_at = CURRENT_TIMESTAMP
		WHERE
			login_id = #{loginId,jdbcType=VARCHAR}
			AND
			deleted_flg = 0
	</update>
	<select id="countUsers" resultType="int">
		SELECT
			COUNT(*)
		FROM
			users AS A
		WHERE
		<if test="cond.loginId != null">
			A.login_id LIKE #{cond.loginId} {escape '\'} AND
		</if>
		<if test="cond.registeredFrom != null">
			A.registered_at &gt;= #{cond.registeredFrom} AND
		</if>
		<if test="cond.registeredTo != null">
			A.registered_at &lt; #{cond.registeredTo} AND
		</if>
		<if test="cond.firstName != null">
			A.first_name LIKE #{cond.firstName} {escape '\'} AND
		</if>
		<if test="cond.lastName != null">
			A.last_name LIKE #{cond.lastName} {escape '\'} AND
		</if>
		A.deleted_flg = 0
	</select>
	<select id="searchUsers" resultMap="BaseResultMap">
		SELECT
			A.id,
			A.login_id,
			A.registered_at,
			A.first_name,
			A.last_name
		FROM
			users AS A
		WHERE
		<if test="cond.loginId != null">
			A.login_id LIKE #{cond.loginId} {escape '\'} AND
		</if>
		<if test="cond.registeredFrom != null">
			A.registered_at &gt;= #{cond.registeredFrom} AND
		</if>
		<if test="cond.registeredTo != null">
			A.registered_at &lt; #{cond.registeredTo} AND
		</if>
		<if test="cond.firstName != null">
			A.first_name LIKE #{cond.firstName} {escape '\'} AND
		</if>
		<if test="cond.lastName != null">
			A.last_name LIKE #{cond.lastName} {escape '\'} AND
		</if>
		A.deleted_flg = 0
		LIMIT #{limit,jdbcType=INTEGER} OFFSET #{offset,jdbcType=INTEGER}
	</select>
</mapper>
