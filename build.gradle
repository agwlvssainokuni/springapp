apply plugin: "java"
apply plugin: "eclipse"

allprojects { version = "1.0" }

subprojects {

	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: "deliveryResources"
	// apply plugin: "checkstyle"
	apply plugin: "findbugs"
	apply plugin: "pmd"
	apply plugin: "jdepend"
	apply plugin: "jacoco"

	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	compileJava.options.encoding = "UTF-8"
	compileTestJava.options.encoding = "UTF-8"

	configurations {
		provided
		compileOnly
		compileExt
		compile.extendsFrom(compileExt)
	}

	sourceSets.main {
		java { srcDir "src/generated/java" }
		resources {
			srcDir "src/main/java"
			srcDir "src/generated/java"
		}
		compileClasspath += [configurations.provided]
		compileClasspath += [configurations.compileOnly]
		runtimeClasspath += [configurations.provided]
	}
	sourceSets.test {
		resources { srcDir "src/test/java" }
		compileClasspath += [configurations.provided]
		compileClasspath += [configurations.compileOnly]
		runtimeClasspath += [configurations.provided]
	}
	eclipse {
		classpath.plusConfigurations += [configurations.provided]
		classpath.plusConfigurations += [configurations.compileOnly]
	}

	javadoc {
		classpath += [configurations.provided]
		classpath += [configurations.compileOnly]
		options.encoding = "UTF-8"
		options.addBooleanOption("Xdoclint:none", true)
	}

	findbugs { ignoreFailures = true }
	findbugsMain {
		// excludeFilter = rootProject.file("findbugs-exclude.xml")
		reports {
			xml.enabled true
			html.enabled false
		}
	}
	findbugsMain.doFirst {
		def pkgPath = file("build/classes/main/cherry/spring/common/db/gen").canonicalPath
		classes = classes.filter { !it.canonicalPath.startsWith(pkgPath) }
	}

	pmd { ignoreFailures = true }
	pmdMain {
		exclude "cherry/spring/common/db/gen/**"
		exclude "cherry/querytutorial/db/gen/**"
		reports {
			xml.enabled true
			html.enabled false
		}
	}

	jdepend { ignoreFailures = true }
	jdependMain {
		reports {
			xml.enabled true
			text.enabled false
		}
	}

	jacocoTestReport {
		reports {
			xml.enabled true
			html.enabled false
		}
	}

	repositories { mavenCentral() }

	configurations {
		all*.exclude group: "commons-logging", module: "commons-logging"
	}

	ext {
		versionH2db = "1.4.188"
		versionFlyway = "3.2.1"
		versionJodaTime = "2.8.2"
		versionGuava = "18.0"
		versionCommonsPool = "1.6"
		versionCommonsDbcp2 = "2.0.1"
		versionCommonsLang3 = "3.3.2"
		versionCommonsMath3 = "3.3"
		versionCommonsCollections4 = "4.0"
		versionCommonsCompress = "1.9"
		versionCommonsCodec = "1.10"
		versionCommonsCsv = "1.1"
		versionCommonsExec = "1.3"
		versionVelocity = "1.7"
		versionPoi = "3.11"
		versionPdfbox = "1.8.8"
		versionIcu4j = "55.1"
		versionFluentLogger = "0.3.0"
		versionSlf4j = "1.7.12"
		versionLogback = "1.1.3"
		versionMyBatis = "3.2.8"
		versionMyBatisSpring = "1.2.2"
		versionQuerydsl = "3.6.8"
		versionJackson = "2.5.3"
		versionAspectJ = "1.8.2"
		versionAopalliance = "1.0"
		versionSpring = "4.1.7.RELEASE"
		versionSpringLdap = "2.0.4.RELEASE"
		versionSpringSecurity = "4.0.2.RELEASE"
		versionSpringMobile = "1.1.4.RELEASE"
		versionSpringDataJdbcCore = "1.1.0.RELEASE"
		versionHibernateValidator = "5.1.2.Final"
		versionTiles = "3.0.5"
		versionJstl = "1.2"
		versionJavaMail = "1.4.7"
		versionJavaValidation = "1.1.0.Final"
		versionJavaEl = "3.0.0"
		versionJavaServlet = "3.0.1"
		versionJavaJsp = "2.2.1"
		versionJavaJms = "1.1-rev-1"
		versionJavaTransaction = "1.1-rev-1"
		versionLombok = "1.16.6"
		versionJunit = "4.12"
		versionHamcrest = "1.3"
		versionMockito = "2.0.2-beta"
	}

	dependencies {
		testCompile "org.springframework:spring-test:${versionSpring}"
		testCompile "junit:junit:${versionJunit}"
		testCompile "org.hamcrest:hamcrest-all:${versionHamcrest}"
		testCompile "org.mockito:mockito-all:${versionMockito}"
		testRuntime "org.glassfish:javax.el:${versionJavaEl}"
	}

	deliveryResources {
		from "src/main/deliveryResources"
		tokens "../filter.properties"
		tokens { props ->
			def appdir = "/opt/" + parent.name
			if (parent.hasProperty("appendix")) {
				appdir = appdir + "/" + parent.appendix
			}
			for (String dir : ["admin", "entree"]) {
				props.setProperty("filter.${dir}.conf", "${appdir}/${dir}/conf")
				props.setProperty("filter.${dir}.log.dir", "${appdir}/${dir}/log")
			}
			for (String dir : ["batch"]) {
				props.setProperty("filter.${dir}.conf", "${appdir}/${dir}/conf")
				props.setProperty("filter.${dir}.log.dir", "${appdir}/${dir}/job/\${jobId}/log")
				props.setProperty("filter.${dir}.log.dir.common", "${appdir}/${dir}/log")
			}
		}
	}
}

task deliveryZip(type: Zip)
task deliveryTar(type: Tar) { compression = Compression.GZIP }

[deliveryZip, deliveryTar].each {
	it.baseName = project.name
	it.version = project.version
	if (project.hasProperty("appendix")) {
		it.appendix = project.appendix
	}
	it.classifier = "delivery"
	it.dependsOn ":admin:assembleDelivery"
	it.dependsOn ":entree:assembleDelivery"
	it.dependsOn ":batch:assembleDelivery"
	it.dependsOn ":batch:installApp"

	it.with(copySpec {

		["admin", "entree"].each { dir ->
			into("${dir}/app") {
				from("${dir}/build/libs")
				include "*.war"
				rename {
					if (project.hasProperty("appendix")) {
						it.replace("-${version}", project.appendix)
					} else {
						it.replace("-${version}", "")
					}
				}
			}
		}

		["batch"].each { dir ->
			into("${dir}") { from("${dir}/build/install/${dir}") }
		}

		["admin", "entree", "batch"].each { dir ->
			into("${dir}/conf") {
				from("${dir}/build/resources/main") {
					include "*.properties"
					exclude "${dir}.properties"
					exclude "log.properties"
					rename { it + ".template" }
				}
			}
			into("${dir}/log") {
			}
		}
	})
}
