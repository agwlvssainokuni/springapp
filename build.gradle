allprojects {
	version = "1.0"
}

apply plugin: "eclipse"

subprojects {
	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: "deliveryResources"

	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	compileJava.options.encoding = "UTF-8"
	compileTestJava.options.encoding = "UTF-8"

	sourceSets.main.resources.srcDir "src/main/java"
	sourceSets.test.resources.srcDir "src/test/java"

	repositories {
		mavenCentral()
		maven {
			url "http://repository.jboss.org/nexus/content/repositories/public/"
		}
	}

	configurations {
		all*.exclude group: "commons-logging", module: "commons-logging"
		provided
	}

	sourceSets.main.compileClasspath += [configurations.provided]
	eclipse.classpath.plusConfigurations += [configurations.provided]

	deliveryResources {
		from "src/main/deliveryResources"
		tokens "../filter.properties"
		override { props ->
			def appdir = "/opt/" + parent.name
			if (parent.hasProperty("appendix")) {
				appdir = appdir + "/" + parent.appendix
			}
			for (String dir : ["admin", "entree"]) {
				props.setProperty("filter.${dir}.conf", "${appdir}/${dir}/conf")
				props.setProperty("filter.${dir}.log.dir", "${appdir}/${dir}/log")
			}
			for (String dir : ["batch"]) {
				props.setProperty("filter.${dir}.conf", "${appdir}/${dir}/conf")
				props.setProperty("filter.${dir}.log.dir", "${appdir}/${dir}/job/\${jobId}/log")
				props.setProperty("filter.${dir}.log.dir.common", "${appdir}/${dir}/log")
			}
		}
	}
}

task deliveryZip(type: Zip)
task deliveryTar(type: Tar) { compression = Compression.GZIP }

[deliveryZip, deliveryTar].each {
	it.baseName = project.name
	it.version = project.version
	if (project.hasProperty("appendix")) {
		it.appendix = project.appendix
	}
	it.classifier = "delivery"
	it.dependsOn ":admin:assembleDelivery"
	it.dependsOn ":entree:assembleDelivery"
	it.dependsOn ":batch:assembleDelivery"
	it.dependsOn ":batch:installApp"

	for (String dir : ["admin", "entree"]) {
		it.into("${dir}/app") {
			from("${dir}/build/libs")
			include "*.war"
			rename {
				if (project.hasProperty("appendix")) {
					it.replace("-${version}", project.appendix)
				} else {
					it.replace("-${version}", "")
				}
			}
		}
	}

	for (String dir : ["batch"]) {
		it.into("${dir}") {
			from("${dir}/build/install/${dir}")
		}
	}

	for (String dir : ["admin", "entree", "batch"]) {
		it.into("${dir}/conf") {
			from("${dir}/build/resources/main") {
				include "*.properties"
				exclude "${dir}.properties"
				exclude "log.properties"
				rename { it + ".template" }
			}
		}
		it.into("${dir}/log") {
		}
	}
}
