allprojects {
	version = "1.0"
}

subprojects {
	apply plugin: "java"
	apply plugin: "eclipse"

	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	repositories {
		mavenCentral()
		maven {
			url "http://repository.jboss.org/nexus/content/repositories/public/"
		}
	}

	configurations {
		all*.exclude group: "commons-logging", module: "commons-logging"
	}

	if (parent.hasProperty("appendix")) {
		project.appendix = parent.appendix
	}

	sourceSets. main.resources {
		srcDir "src/main/java"
	}

	task processDistResources(type: Copy, overwrite: true) {
		from "src/main/distResources"
		into sourceSets.main.output.resourcesDir

		def props = new Properties()
		file("../filter.properties").withInputStream { props.load(it) }
		def appdir = "/opt/" + parent.name
		if (project.hasProperty("appendix")) {
			appdir = appdir + "/" + project.appendix
		}
		for (String dir : ["admin", "entree", "batch"]) {
			props.setProperty("filter.${dir}.conf", "${appdir}/${dir}/conf")
			props.setProperty("filter.${dir}.log.dir", "${appdir}/${dir}/log")
		}

		filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: props)
		dependsOn processResources
	}

	classes.mustRunAfter processDistResources

	compileJava {
		options.encoding = "UTF-8"
	}

	compileTestJava {
		options.encoding = "UTF-8"
	}
}

def distSpec = copySpec {

	for (String dir : ["admin", "entree"]) {
		into("${dir}/app") {
			from("${dir}/build/libs")
			include "*.war"
			rename {
				if (project.hasProperty("appendix")) {
					project.appendix + "#" + it.replace("-${version}", "")
				} else {
					it.replace("-${version}", "")
				}
			}
		}
	}

	for (String dir : ["batch"]) {
		into("${dir}") {
			from("${dir}/build/install/${dir}")
		}
	}

	for (String dir : ["admin", "entree", "batch"]) {
		into("${dir}/conf") {
			from("${dir}/build/resources/main") {
				include "*.properties"
				exclude "${dir}.properties"
				exclude "log.properties"
				rename { it + ".template" }
			}
		}
		into("${dir}/log") {
		}
	}
}

task distZip(type: Zip) {
	baseName = project.name
	version = project.version
	if (project.hasProperty("appendix")) {
		appendix = project.appendix
	}
	classifier = "dist"
	with(distSpec)
	dependsOn ":admin:processDistResources"
	dependsOn ":entree:processDistResources"
	dependsOn ":batch:processDistResources"
	dependsOn ":admin:war", ":entree:war", ":batch:installApp"
}

task distTar(type: Tar) {
	baseName = project.name
	version = project.version
	if (project.hasProperty("appendix")) {
		appendix = project.appendix
	}
	classifier = "dist"
	compression = Compression.GZIP
	with(distSpec)
	dependsOn ":admin:processDistResources"
	dependsOn ":entree:processDistResources"
	dependsOn ":batch:processDistResources"
	dependsOn ":admin:war", ":entree:war", ":batch:installApp"
}
