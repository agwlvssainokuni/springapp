allprojects {
	version = "1.0"
}

subprojects {
	apply plugin: "java"
	apply plugin: "eclipse"

	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	repositories {
		mavenCentral()
	}

	ext {
		versionH2db = "1.3.175"
		versionFlyway = "2.3.1"
		versionJodaTime = "2.3"
		versionCommonsDbcp = "1.4"
		versionCommonsLang3 = "3.3"
		versionCommonsMath3 = "3.2"
		versionVelocity = "1.7"
		versionFluentLogger = "0.2.11"
		versionSlf4j = "1.7.6"
		versionLogback = "1.1.1"
		versionMyBatis = "3.2.5"
		versionMyBatisSpring = "1.2.2"
		versionJackson = "2.3.2"
		versionAspectJ = "1.7.4"
		versionAopalliance = "1.0"
		versionSpring = "4.0.2.RELEASE"
		versionSpringLdap = "2.0.1.RELEASE"
		versionSpringSecurity = "3.2.2.RELEASE"
		versionSpringMobile = "1.1.1.RELEASE"
		versionJavaMail = "1.4.7"
		versionJavaValidation = "1.1.0.Final"
		versionHibernateValidator = "5.1.0.Final"
		versionJunit = "4.11"
		versionMockito = "1.9.5"
	}

	configurations {
		all*.exclude group: "commons-logging", module: "commons-logging"
	}

	dependencies {
		compile "com.h2database:h2:${versionH2db}"
		compile "com.googlecode.flyway:flyway-core:${versionFlyway}"
		compile "joda-time:joda-time:${versionJodaTime}"
		compile "commons-dbcp:commons-dbcp:${versionCommonsDbcp}"
		compile "org.apache.commons:commons-lang3:${versionCommonsLang3}"
		compile "org.apache.commons:commons-math3:${versionCommonsMath3}"
		compile "org.apache.velocity:velocity:${versionVelocity}"
		compile "org.fluentd:fluent-logger:${versionFluentLogger}"
		compile "org.slf4j:slf4j-api:${versionSlf4j}"
		compile "org.slf4j:jcl-over-slf4j:${versionSlf4j}"
		compile "ch.qos.logback:logback-core:${versionLogback}"
		compile "ch.qos.logback:logback-classic:${versionLogback}"
		compile "org.mybatis:mybatis:${versionMyBatis}"
		compile "org.mybatis:mybatis-spring:${versionMyBatisSpring}"
		compile "com.fasterxml.jackson.core:jackson-core:${versionJackson}"
		compile "com.fasterxml.jackson.core:jackson-annotations:${versionJackson}"
		compile "com.fasterxml.jackson.core:jackson-databind:${versionJackson}"
		compile "org.aspectj:aspectjrt:${versionAspectJ}"
		compile "org.aspectj:aspectjweaver:${versionAspectJ}"
		compile "aopalliance:aopalliance:${versionAopalliance}"
		compile "org.springframework:spring-core:${versionSpring}"
		compile "org.springframework:spring-beans:${versionSpring}"
		compile "org.springframework:spring-expression:${versionSpring}"
		compile "org.springframework:spring-aop:${versionSpring}"
		compile "org.springframework:spring-context:${versionSpring}"
		compile "org.springframework:spring-context-support:${versionSpring}"
		compile "org.springframework:spring-tx:${versionSpring}"
		compile "org.springframework:spring-jdbc:${versionSpring}"
		compile "org.springframework:spring-orm:${versionSpring}"
		compile "org.springframework:spring-oxm:${versionSpring}"
		compile "org.springframework:spring-jms:${versionSpring}"
		compile "org.springframework:spring-web:${versionSpring}"
		compile "org.springframework:spring-webmvc:${versionSpring}"
		compile "org.springframework.ldap:spring-ldap-core:${versionSpringLdap}"
		compile "org.springframework.ldap:spring-ldap-core-tiger:${versionSpringLdap}"
		compile "org.springframework.security:spring-security-core:${versionSpringSecurity}"
		compile "org.springframework.security:spring-security-acl:${versionSpringSecurity}"
		compile "org.springframework.security:spring-security-web:${versionSpringSecurity}"
		compile "org.springframework.security:spring-security-taglibs:${versionSpringSecurity}"
		compile "org.springframework.security:spring-security-ldap:${versionSpringSecurity}"
		compile "org.springframework.security:spring-security-config:${versionSpringSecurity}"
		compile "org.springframework.mobile:spring-mobile-device:${versionSpringMobile}"
		compile "javax.mail:mail:${versionJavaMail}"
		compile "javax.validation:validation-api:${versionJavaValidation}"
		compile "org.hibernate:hibernate-validator:${versionHibernateValidator}"
		testCompile "junit:junit:${versionJunit}"
		testCompile "org.mockito:mockito-all:${versionMockito}"
	}

	if (parent.hasProperty("appendix")) {
		project.appendix = parent.appendix
	}

	task processDistResources(type: Copy, overwrite: true) {
		from "src/main/distResources"
		into sourceSets.main.output.resourcesDir

		def props = new Properties()
		file("../filter.properties").withInputStream { props.load(it) }
		def appdir = "/opt/" + parent.name
		if (project.hasProperty("appendix")) {
			appdir = appdir + "/" + project.appendix
		}
		for (String dir : ["admin", "site", "batch"]) {
			props.setProperty("filter.${dir}.conf", "${appdir}/${dir}/conf")
			props.setProperty("filter.${dir}.log.dir", "${appdir}/${dir}/log")
		}

		filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: props)
		dependsOn processResources
	}

	classes.mustRunAfter processDistResources

	compileJava {
		options.encoding = "UTF-8"
	}

	compileTestJava {
		options.encoding = "UTF-8"
	}
}

def distSpec = copySpec {

	for (String dir : ["admin", "site"]) {
		into("${dir}/app") {
			from("${dir}/build/libs")
			include "*.war"
			rename {
				if (project.hasProperty("appendix")) {
					project.appendix + "#" + it.replace("-${version}", "")
				} else {
					it.replace("-${version}", "")
				}
			}
		}
	}

	for (String dir : ["batch"]) {
		into("${dir}") {
			from("${dir}/build/install/${dir}")
		}
	}

	for (String dir : ["admin", "site", "batch"]) {
		into("${dir}/conf") {
			from("${dir}/build/resources/main") {
				include "*.properties"
				exclude "${dir}.properties"
				exclude "log.properties"
				rename { it + ".template" }
			}
		}
		into("${dir}/log") {
		}
	}
}

task distZip(type: Zip) {
	baseName = project.name
	version = project.version
	if (project.hasProperty("appendix")) {
		appendix = project.appendix
	}
	classifier = "dist"
	with(distSpec)
	dependsOn ":admin:processDistResources"
	dependsOn ":site:processDistResources"
	dependsOn ":batch:processDistResources"
	dependsOn ":admin:war", ":site:war", ":batch:installApp"
}

task distTar(type: Tar) {
	baseName = project.name
	version = project.version
	if (project.hasProperty("appendix")) {
		appendix = project.appendix
	}
	classifier = "dist"
	compression = Compression.GZIP
	with(distSpec)
	dependsOn ":admin:processDistResources"
	dependsOn ":site:processDistResources"
	dependsOn ":batch:processDistResources"
	dependsOn ":admin:war", ":site:war", ":batch:installApp"
}
